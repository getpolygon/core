import _ from "lodash";
import bcrypt from "bcrypt";
import Express from "express";
import jwt from "jsonwebtoken";
// import minio from "../../db/minio";
import emailValidator from "email-validator";
const { JWT_PRIVATE_KEY, SALT_ROUNDS } = process.env;
import { Prisma, PrismaClient } from "@prisma/client";
import generateDicebearUrl from "../../utils/generateDicebearUrl";

const prisma = new PrismaClient();

export default async (req: Express.Request, res: Express.Response) => {
  const email = _.toLower(req.body.email);
  const username = _.toLower(req.body.username);
  const { password, firstName, lastName } = req.body;
  const hasValidEmail = emailValidator.validate(email);

  if (hasValidEmail && password && firstName && lastName && username) {
    try {
      // Hashing the password
      const hashedPassword = await bcrypt.hash(
        password,
        parseInt(SALT_ROUNDS!!)
      );
      // Creating new user payload
      const data = {
        email,
        lastName,
        username,
        firstName,
        avatar: "",
        password: hashedPassword,
      };

      // Check if there's a attached profile picture
      if (!req.file) {
        // Getting the properties
        const { firstName, lastName } = data;
        // Setting the avatar URL to an image generated by an external API
        data.avatar = generateDicebearUrl(firstName, lastName);
      } else {
        //   // Getting file format
        //   const format = req.file.mimetype.split(",")[1];
        //   /**
        //    * Creating file path
        //    * Default file path for user avatars is
        //    *
        //    * USER_ID/USER_ID.IMAGE_FORMAT
        //    */
        //   const path = `${account.id}/${account.id}.${format}`;
        //   // Uploading to MinIO
        //   await minio.client.putObject(
        //     minio.config.MINIO_BUCKET,
        //     path,
        //     req.file.buffer,
        //     req.file.size,
        //     {
        //       "Content-Type": req.file.mimetype,
        //     }
        //   );
        //   // TODO: Implement secure TLS with SSL or something
        //   const PROTOCOL = "http://";
        //   // Setting the account URL to the
        //   data.avatar = `${PROTOCOL}${minio.config.MINIO_ENDPOINT}:${minio.config.MINIO_PORT}/${minio.config.MINIO_BUCKET}/${path}`;
      }

      // Creating the account
      const user = await prisma.user.create({
        data: data,
      });

      // Creating an account token
      jwt.sign({ id: user.id }, JWT_PRIVATE_KEY!!, {}, (err, token) => {
        if (err) console.error(err);
        else {
          // Returning the token
          return res
            .status(201)
            .cookie("jwt", token!!, {
              secure: true,
              signed: true,
              httpOnly: true,
              sameSite: "none",
            })
            .json({ token });
        }
      });
    } catch (error) {
      if (error instanceof Prisma.PrismaClientKnownRequestError) {
        if (error.code === "P2002") return res.status(403).json(error?.meta);
      } else throw error;
    }
  } else return res.status(400).send();
};
